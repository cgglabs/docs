"use strict";(self.webpackChunkcgg_labs_docs=self.webpackChunkcgg_labs_docs||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"rp2040-freertos","metadata":{"permalink":"/blog/rp2040-freertos","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-04-12-adding-freertos-to-an-rp2040-project.md","source":"@site/blog/2025-04-12-adding-freertos-to-an-rp2040-project.md","title":"Adding FreeRTOS to an RP2040 Project","description":"We at CGG Labs love the RP2040","date":"2025-04-12T00:00:00.000Z","tags":[{"inline":false,"label":"RP2040","permalink":"/blog/tags/rp2040","description":"RP2040 tag description"},{"inline":false,"label":"FreeRTOS","permalink":"/blog/tags/freertos","description":"FreeRTOS tag description"}],"readingTime":3.92,"hasTruncateMarker":true,"authors":[{"name":"Carlos Gonzalez","title":"Chief Hacker @ CGG Labs","url":"https://cggonzalez.com/","page":{"permalink":"/blog/authors/carlos"},"socials":{"x":"https://x.com/_carlosgonzal","github":"https://github.com/cggonzal"},"imageURL":"/img/cgg.jpeg","key":"carlos"}],"frontMatter":{"slug":"rp2040-freertos","title":"Adding FreeRTOS to an RP2040 Project","authors":"carlos","image":"/img/freertos_blog_post.png","tags":["RP2040","FreeRTOS"]},"unlisted":false,"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"We at CGG Labs love the RP2040 :heart: \\n\\nHere\'s how to use it with FreeRTOS to unlock the power of full preemptive scheduling.\\n\\n\x3c!-- truncate --\x3e\\nOr you can use our [template](https://github.com/cgglabs/Pico-FreeRTOS) and get on with building. \\n\\n# Adding FreeRTOS to an RP2040 Project in VSCode\\n\\nThis guide walks you through integrating FreeRTOS into an RP2040 project (e.g., Raspberry Pi Pico) using VSCode. We\'ll use the Pico SDK and CMake for building, ensuring a smooth setup for real-time applications.\\n\\n## Prerequisites\\n\\n- **Pico SDK**: Installed and configured.\\n- **VSCode**: Equipped with [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) and [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extensions.\\n- **RP2040 Project**: A working project set up in VSCode with the Pico SDK.\\n- **Git**: Installed for cloning FreeRTOS.\\n\\n## Step-by-Step Instructions\\n\\n### 1. Download FreeRTOS\\n\\nClone the FreeRTOS repository or download a release:\\n\\n```bash\\ngit clone https://github.com/FreeRTOS/FreeRTOS.git --recurse-submodules\\n```\\n\\nAlternatively, grab a zip from [FreeRTOS GitHub releases](https://github.com/FreeRTOS/FreeRTOS/releases) and extract it.\\n\\n### 2. Copy FreeRTOS Files to Your Project\\n\\nOrganize FreeRTOS files in your project:\\n\\n- Create a `FreeRTOS` directory in your project root.\\n- Copy the following from the FreeRTOS repository to `FreeRTOS`:\\n  - `FreeRTOS/Source` (core files).\\n  - `FreeRTOS/Source/portable/GCC/ARM_CM0` (Cortex-M0 port for RP2040).\\n  - `FreeRTOS/Source/portable/MemMang/heap_4.c` (heap_4 is a common memory manager; others like `heap_1.c` can also be used).\\n- Copy `FreeRTOS/Source/include` to `FreeRTOS/include`.\\n\\n### 3. Add FreeRTOS Configuration File\\n\\nCreate `FreeRTOSConfig.h` in the `FreeRTOS/include` directory with a minimal configuration:\\n\\n```c\\n#ifndef FREERTOS_CONFIG_H\\n#define FREERTOS_CONFIG_H\\n\\n#define configUSE_PREEMPTION 1\\n#define configUSE_IDLE_HOOK 0\\n#define configUSE_TICK_HOOK 0\\n#define configCPU_CLOCK_HZ 125000000 // 125MHz\\n#define configTICK_RATE_HZ ((TickType_t)1000) // 1ms tick\\n#define configMAX_PRIORITIES (5)\\n#define configMINIMAL_STACK_SIZE ((uint16_t)128)\\n#define configTOTAL_HEAP_SIZE ((size_t)(10 * 1024)) // 10KB heap\\n#define configMAX_TASK_NAME_LEN (16)\\n#define configUSE_16_BIT_TICKS 0\\n#define configIDLE_SHOULD_YIELD 1\\n#define configUSE_MUTEXES 1\\n#define configQUEUE_REGISTRY_SIZE 8\\n\\n/* Memory allocation definitions */\\n#define configSUPPORT_DYNAMIC_ALLOCATION 1\\n#define configSUPPORT_STATIC_ALLOCATION 0\\n\\n/* Interrupt priorities */\\n#define configKERNEL_INTERRUPT_PRIORITY 255\\n#define configMAX_SYSCALL_INTERRUPT_PRIORITY 191\\n\\n/* Map to Pico SDK */\\n#define configUSE_TIMERS 1\\n#define configTIMER_TASK_PRIORITY (configMAX_PRIORITIES - 1)\\n#define configTIMER_QUEUE_LENGTH 10\\n#define configTIMER_TASK_STACK_DEPTH configMINIMAL_STACK_SIZE\\n\\n#define configENABLE_MPU 0\\n\\n/* Set the following INCLUDE_* constants to 1 to include the named API function,\\n * or 0 to exclude the named API function.  Most linkers will remove unused\\n * functions even when the constant is 1. */\\n#define INCLUDE_vTaskPrioritySet               1\\n#define INCLUDE_uxTaskPriorityGet              1\\n#define INCLUDE_vTaskDelete                    1\\n#define INCLUDE_vTaskSuspend                   1\\n#define INCLUDE_vTaskDelayUntil                1\\n#define INCLUDE_vTaskDelay                     1\\n#define INCLUDE_xTaskGetSchedulerState         1\\n#define INCLUDE_xTaskGetCurrentTaskHandle      1\\n#define INCLUDE_uxTaskGetStackHighWaterMark    0\\n#define INCLUDE_xTaskGetIdleTaskHandle         0\\n#define INCLUDE_eTaskGetState                  0\\n#define INCLUDE_xTimerPendFunctionCall         0\\n#define INCLUDE_xTaskAbortDelay                0\\n#define INCLUDE_xTaskGetHandle                 0\\n#define INCLUDE_xTaskResumeFromISR             1\\n\\n#endif /* FREERTOS_CONFIG_H */\\n```\\n\\nCustomize `configTOTAL_HEAP_SIZE`, `configMAX_PRIORITIES`, etc., based on your project needs.\\n\\n### 4. Update CMakeLists.txt\\n\\nModify your `CMakeLists.txt` to include FreeRTOS:\\n\\n```cmake\\n# Add FreeRTOS as a library\\nadd_library(freertos\\n    FreeRTOS/Source/croutine.c\\n    FreeRTOS/Source/event_groups.c\\n    FreeRTOS/Source/list.c\\n    FreeRTOS/Source/queue.c\\n    FreeRTOS/Source/stream_buffer.c\\n    FreeRTOS/Source/tasks.c\\n    FreeRTOS/Source/timers.c\\n    FreeRTOS/Source/portable/GCC/ARM_CM0/port.c\\n    FreeRTOS/Source/portable/GCC/ARM_CM0/portasm.c\\n    FreeRTOS/Source/portable/GCC/ARM_CM0/mpu_wrappers_v2_asm.c\\n    FreeRTOS/Source/portable/MemMang/heap_4.c\\n)\\n\\n# Include FreeRTOS headers\\ntarget_include_directories(freertos PUBLIC\\n    ${CMAKE_CURRENT_LIST_DIR}/FreeRTOS/include\\n    ${CMAKE_CURRENT_LIST_DIR}/FreeRTOS/Source/portable/GCC/ARM_CM0\\n    ${CMAKE_CURRENT_LIST_DIR}/FreeRTOS\\n)\\n\\n# Link FreeRTOS to your executable\\ntarget_link_libraries(your_executable_name PRIVATE\\n    pico_stdlib\\n    freertos\\n)\\n```\\n\\n- Replace `your_executable_name` with your target\'s name (from `add_executable`).\\n- Ensure `pico_stdlib` is included for Pico SDK functionality.\\n\\n### 5. (optional) Implement Stack Overflow Hook\\n\\nIf `configCHECK_FOR_STACK_OVERFLOW` is enabled, add the hook in your main C file or a utilities file:\\n\\n```c\\nvoid vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName) {\\n    (void)pxTask;\\n    (void)pcTaskName;\\n    while (1) {\\n        // Handle stack overflow (e.g., log error, blink LED, or halt)\\n    }\\n}\\n```\\n\\n### 6. Write FreeRTOS Code\\n\\nInclude FreeRTOS in your main file and create a sample task:\\n\\n```c\\n#include \\"pico/stdlib.h\\"\\n#include <FreeRTOS.h>\\n#include <task.h>\\n\\n#define LED_PIN 25\\n\\nvoid vTaskExample(void *pvParameters) {\\n    // Initialize LED pin\\n    gpio_init(LED_PIN);\\n    gpio_set_dir(LED_PIN, GPIO_OUT);\\n\\n    while (1) {\\n        gpio_put(LED_PIN, 1);           // Turn LED on\\n        vTaskDelay(pdMS_TO_TICKS(500)); // On for 500ms\\n        gpio_put(LED_PIN, 0);           // Turn LED off\\n        vTaskDelay(pdMS_TO_TICKS(500)); // Off for 500ms\\n    }\\n}\\n\\nint main() {\\n    // Initialize Pico SDK\\n    stdio_init_all();\\n\\n    // Create task\\n    xTaskCreate(vTaskExample, \\"ExampleTask\\", 256, NULL, 1, NULL);\\n\\n    // Start scheduler\\n    vTaskStartScheduler();\\n\\n    // Should never reach here\\n    while (1);\\n}\\n\\n```\\n\\n### 7. Configure VSCode Build\\n\\nSet up VSCode to build with the Pico SDK toolchain:\\n\\n- Use the CMake Tools extension.\\n- Open the Command Palette (`Ctrl+Shift+P`), select **CMake: Configure**.\\n- Choose your kit (e.g., Pico SDK toolchain).\\n- Build the project (**CMake: Build** or `F7`).\\n\\n### 8. Build and Flash\\n\\n- Build the project in VSCode.\\n- Flash the `.uf2` file to your RP2040 (drag to the USB drive in BOOTSEL mode).\\n\\n### 9. Test the Project\\n\\n- Connect a terminal (e.g., PuTTY or `minicom`) to the RP2040\'s UART (default: USB CDC).\\n- Confirm the task prints \\"Task running\\" every second.\\n\\n## Notes\\n\\n- **Heap Size**: Tune `configTOTAL_HEAP_SIZE` (RP2040 has 264KB SRAM).\\n- **Stack Size**: Set task stack sizes (e.g., 256 in `xTaskCreate`) to avoid overflows.\\n\\n## Troubleshooting\\n\\nIf you encounter linker errors or crashes:\\n- Verify `CMakeLists.txt` paths.\\n- Check `FreeRTOSConfig.h` settings.\\n- Adjust stack and heap sizes."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"Carlos Gonzalez","title":"Chief Hacker @ CGG Labs","url":"https://cggonzalez.com/","page":{"permalink":"/blog/authors/carlos"},"socials":{"x":"https://x.com/_carlosgonzal","github":"https://github.com/cggonzal"},"imageURL":"/img/cgg.jpeg","key":"carlos"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["carlos"],"tags":[]},"unlisted":false,"prevItem":{"title":"Adding FreeRTOS to an RP2040 Project","permalink":"/blog/rp2040-freertos"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nHere are a few tips you might find useful.\\n\\n\x3c!-- truncate --\x3e\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."}]}}')}}]);